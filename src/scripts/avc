#!/bin/sh -e
#
# Init script (place under /etc/init.d) to manage the autonomous vehicle
# service (runs the /usr/sbin/avc program)
#
### BEGIN INIT INFO
# Provides:          avc
# Required-Start:    $local_fs
# Required-Stop:     $local_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Run Autonomous Vehicle Command
# Description:       Run Autonomous Vehicle Command (/usr/sbin/avc)
### END INIT INFO

# If the AVC command executable is present, then 
name=avc;
cmd=/usr/sbin/${name};
pid="";

avcOpts="";
avcVisionOpts="";

stanchionFile=/dev/shm/stanchions;
confFile=/etc/${name}.conf.d/avc-service.conf
pidFile=/var/run/${name}.pid;
logDir=/var/log/${name};
logFile=${logDir}/${name}.log;
overlay=timon-gpio;
SLOTS=/sys/devices/bone_capemgr.9/slots;

# avc-vision process related variables
cmdVis=${cmd}-vision;
pidVis="";
pidFileVis=/var/run/${name}-vision.pid;
logFileVis=${logDir}/${name}-vision.log;

# Make sure that both driving and vision programs are installed
if [ ! -x ${cmd} ] || [ ! -x ${cmdVis} ]; then
  exit 1;
fi

# Read in configuration file overrides (if any)
if [ -r "${confFile}" ]; then
  . "${confFile}";
fi

EXITSTATUS=0;

#
# Determine if process is running
#
get_status() {
  if [ -f "${pidFile}" ]; then
    pid=`cat ${pidFile}`;
    if ps ${pid} > /dev/null 2>&1; then
      return 0;
    fi
  fi
  pid="";
  return 1;
}

get_status_vision() {
  if [ -f "${pidFileVis}" ]; then
    pidVis=`cat ${pidFileVis}`;
    if ps ${pidVis} > /dev/null 2>&1; then
      return 0;
    fi
  fi
  pidVis="";
  return 1;
}

do_exit() {
  if [ "$1" = "0" ]; then
    echo ok;
  else
    echo FAIL;
  fi
  exit $1;
}

case "$1" in
  start)
    echo -n "Starting ${cmd} (Autonomous Vehicle) ... ";

    if ! grep -q ${overlay} ${SLOTS}; then
      echo ${overlay} >| ${SLOTS};
    fi

    if get_status || get_status_vision; then
      # Already running
      EXITSTATUS=1;
    elif [ ! -d "${logDir}" ] && ! /usr/bin/install -D -m 755 -d "${logDir}"; then
      echo "***ERROR*** Failed to create log directory: ${logDir}";
      EXITSTATUS=1;
    else
      # Initialize stanchion vision file to all zeros
      dd if=/dev/zero of="${stanchionFile}" bs=4 count=7 >/dev/null 2>/dev/null;
      if [ -x ${cmdVis} ]; then
	if [ -f ${logFileVis} ]; then
	  /bin/mv -f ${logFileVis} ${logDir}/${name}-vision-prior.log
        fi
	nice ${cmdVis} ${avcVisionOpts} >| ${logFileVis} 2>&1 < /dev/null &
	pid=$!;
	echo ${pid} >| ${pidFileVis};
      fi

      if [ -f ${logFile} ]; then
	/bin/mv -f ${logFile} ${logDir}/${name}-prior.log
      fi
      ${cmd} ${avcOpts} >| ${logFile} 2>&1 < /dev/null &
      pid=$!;
      echo ${pid} >| ${pidFile};
    fi
    do_exit $EXITSTATUS;
    ;;

  status)
    EXITSTATUS=0;
    if get_status; then
      echo "${name} is running (PID: ${pid})";
    else
      echo "${name} is not running";
      EXITSTATUS=1;
    fi
    if get_status_vision; then
      echo "${name}-vision is running (PID: ${pidVis})";
    else
      echo "${name}-vision is not running";
      EXITSTATUS=1;
    fi
    exit $EXITSTATUS;
    ;;

  stop)
    echo -n "Shutting down ${cmd} (Autonomous Vehicle) ... ";
    if get_status; then
      /bin/kill ${pid} > /dev/null 2>&1 || EXITSTATUS=1;
    fi

    if get_status_vision; then
      /bin/kill ${pidVis} > /dev/null 2>&1 || EXITSTATUS=1;
    fi

    # Clean up pid files
    /bin/rm -f ${pidFile} ${pidFileVis};
      
    do_exit "$EXITSTATUS";
    ;;

  restart)
    $0 stop || EXITSTATUS=1
    $0 start || EXITSTATUS=1
    exit $EXITSTATUS
    ;;
  *)
    echo "Usage: $name {start|stop|restart}" >&2
    exit 3
    ;;
esac
